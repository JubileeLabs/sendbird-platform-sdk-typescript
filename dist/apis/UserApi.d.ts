import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext } from '../http/http';
import { AddRegistrationOrDeviceTokenData } from '../models/AddRegistrationOrDeviceTokenData';
import { AddRegistrationOrDeviceTokenResponse } from '../models/AddRegistrationOrDeviceTokenResponse';
import { ChoosePushNotificationContentTemplateResponse } from '../models/ChoosePushNotificationContentTemplateResponse';
import { CreateUserData } from '../models/CreateUserData';
import { CreateUserTokenData } from '../models/CreateUserTokenData';
import { CreateUserTokenResponse } from '../models/CreateUserTokenResponse';
import { LeaveMyGroupChannelsData } from '../models/LeaveMyGroupChannelsData';
import { ListMyGroupChannelsResponse } from '../models/ListMyGroupChannelsResponse';
import { ListRegistrationOrDeviceTokensResponse } from '../models/ListRegistrationOrDeviceTokensResponse';
import { ListUsersResponse } from '../models/ListUsersResponse';
import { MarkAllMessagesAsReadData } from '../models/MarkAllMessagesAsReadData';
import { RegisterAsOperatorToChannelsWithCustomChannelTypesData } from '../models/RegisterAsOperatorToChannelsWithCustomChannelTypesData';
import { RemoveRegistrationOrDeviceTokenByTokenResponse } from '../models/RemoveRegistrationOrDeviceTokenByTokenResponse';
import { RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse } from '../models/RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse';
import { RemoveRegistrationOrDeviceTokenResponse } from '../models/RemoveRegistrationOrDeviceTokenResponse';
import { ResetPushPreferencesResponse } from '../models/ResetPushPreferencesResponse';
import { SendBirdUser } from '../models/SendBirdUser';
import { UpdateChannelInvitationPreferenceData } from '../models/UpdateChannelInvitationPreferenceData';
import { UpdateChannelInvitationPreferenceResponse } from '../models/UpdateChannelInvitationPreferenceResponse';
import { UpdateCountPreferenceOfChannelByUrlData } from '../models/UpdateCountPreferenceOfChannelByUrlData';
import { UpdateCountPreferenceOfChannelByUrlResponse } from '../models/UpdateCountPreferenceOfChannelByUrlResponse';
import { UpdatePushPreferencesData } from '../models/UpdatePushPreferencesData';
import { UpdatePushPreferencesForChannelByUrlData } from '../models/UpdatePushPreferencesForChannelByUrlData';
import { UpdatePushPreferencesForChannelByUrlResponse } from '../models/UpdatePushPreferencesForChannelByUrlResponse';
import { UpdatePushPreferencesResponse } from '../models/UpdatePushPreferencesResponse';
import { UpdateUserByIdData } from '../models/UpdateUserByIdData';
import { ViewChannelInvitationPreferenceResponse } from '../models/ViewChannelInvitationPreferenceResponse';
import { ViewCountPreferenceOfChannelByUrlResponse } from '../models/ViewCountPreferenceOfChannelByUrlResponse';
import { ViewNumberOfChannelsByJoinStatusResponse } from '../models/ViewNumberOfChannelsByJoinStatusResponse';
import { ViewNumberOfChannelsWithUnreadMessagesResponse } from '../models/ViewNumberOfChannelsWithUnreadMessagesResponse';
import { ViewNumberOfUnreadItemsResponse } from '../models/ViewNumberOfUnreadItemsResponse';
import { ViewNumberOfUnreadMessagesResponse } from '../models/ViewNumberOfUnreadMessagesResponse';
import { ViewPushPreferencesForChannelByUrlResponse } from '../models/ViewPushPreferencesForChannelByUrlResponse';
import { ViewPushPreferencesResponse } from '../models/ViewPushPreferencesResponse';
import { ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner } from '../models/ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner';
export declare class UserApiRequestFactory extends BaseAPIRequestFactory {
    addRegistrationOrDeviceToken(userId: string, tokenType: string, apiToken?: string, addRegistrationOrDeviceTokenData?: AddRegistrationOrDeviceTokenData, _options?: Configuration): Promise<RequestContext>;
    choosePushNotificationContentTemplate(userId: string, apiToken?: string, body?: any, _options?: Configuration): Promise<RequestContext>;
    createUser(apiToken?: string, createUserData?: CreateUserData, _options?: Configuration): Promise<RequestContext>;
    createUserToken(userId: string, apiToken?: string, createUserTokenData?: CreateUserTokenData, _options?: Configuration): Promise<RequestContext>;
    deleteUserById(userId: string, apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    leaveMyGroupChannels(userId: string, apiToken?: string, leaveMyGroupChannelsData?: LeaveMyGroupChannelsData, _options?: Configuration): Promise<RequestContext>;
    listMyGroupChannels(userId: string, apiToken?: string, token?: string, limit?: number, distinctMode?: string, publicMode?: string, superMode?: string, hiddenMode?: string, memberStateFilter?: string, unreadFilter?: string, createdAfter?: number, createdBefore?: number, showEmpty?: boolean, showFrozen?: boolean, showMember?: boolean, showDeliveryReceipt?: boolean, showReadReceipt?: boolean, order?: string, metadataOrderKey?: string, customTypes?: string, customTypeStartswith?: string, channelUrls?: string, name?: string, nameContains?: string, nameStartswith?: string, membersExactlyIn?: string, membersIncludeIn?: string, queryType?: string, membersNickname?: string, membersNicknameContains?: string, searchQuery?: string, searchFields?: string, metadataKey?: string, metadataValues?: string, metadataValueStartswith?: string, metacounterKey?: string, metacounterValues?: string, metacounterValueGt?: string, metacounterValueGte?: string, metacounterValueLt?: string, metacounterValueLte?: string, customType?: string, _options?: Configuration): Promise<RequestContext>;
    listRegistrationOrDeviceTokens(userId: string, tokenType: string, apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    listUsers(apiToken?: string, token?: string, limit?: number, activeMode?: string, showBot?: boolean, userIds?: string, nickname?: string, nicknameStartswith?: string, metadatakey?: string, metadatavaluesIn?: string, _options?: Configuration): Promise<RequestContext>;
    markAllMessagesAsRead(userId: string, apiToken?: string, markAllMessagesAsReadData?: MarkAllMessagesAsReadData, _options?: Configuration): Promise<RequestContext>;
    registerAsOperatorToChannelsWithCustomChannelTypes(userId: string, apiToken?: string, registerAsOperatorToChannelsWithCustomChannelTypesData?: RegisterAsOperatorToChannelsWithCustomChannelTypesData, _options?: Configuration): Promise<RequestContext>;
    removeRegistrationOrDeviceToken(userId: string, apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    removeRegistrationOrDeviceTokenByToken(userId: string, tokenType: string, token: string, apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    removeRegistrationOrDeviceTokenFromOwnerByToken(tokenType: string, token: string, apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    resetPushPreferences(userId: string, apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    updateChannelInvitationPreference(userId: string, apiToken?: string, updateChannelInvitationPreferenceData?: UpdateChannelInvitationPreferenceData, _options?: Configuration): Promise<RequestContext>;
    updateCountPreferenceOfChannelByUrl(userId: string, channelUrl: string, apiToken?: string, updateCountPreferenceOfChannelByUrlData?: UpdateCountPreferenceOfChannelByUrlData, _options?: Configuration): Promise<RequestContext>;
    updatePushPreferences(userId: string, apiToken?: string, updatePushPreferencesData?: UpdatePushPreferencesData, _options?: Configuration): Promise<RequestContext>;
    updatePushPreferencesForChannelByUrl(userId: string, channelUrl: string, apiToken?: string, updatePushPreferencesForChannelByUrlData?: UpdatePushPreferencesForChannelByUrlData, _options?: Configuration): Promise<RequestContext>;
    updateUserById(userId: string, apiToken?: string, updateUserByIdData?: UpdateUserByIdData, _options?: Configuration): Promise<RequestContext>;
    viewChannelInvitationPreference(userId: string, apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    viewCountPreferenceOfChannelByUrl(userId: string, channelUrl: string, apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    viewNumberOfChannelsByJoinStatus(userId: string, apiToken?: string, state?: string, _options?: Configuration): Promise<RequestContext>;
    viewNumberOfChannelsWithUnreadMessages(userId: string, apiToken?: string, customTypes?: Array<string>, superMode?: string, _options?: Configuration): Promise<RequestContext>;
    viewNumberOfUnreadItems(userId: string, apiToken?: string, customType?: string, itemKeys?: string, _options?: Configuration): Promise<RequestContext>;
    viewNumberOfUnreadMessages(userId: string, apiToken?: string, customTypes?: string, superMode?: string, _options?: Configuration): Promise<RequestContext>;
    viewPushPreferences(userId: string, apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    viewPushPreferencesForChannelByUrl(userId: string, channelUrl: string, apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    viewUserById(userId: string, apiToken?: string, includeUnreadCount?: boolean, customTypes?: string, superMode?: string, _options?: Configuration): Promise<RequestContext>;
    viewWhoOwnsRegistrationOrDeviceTokenByToken(tokenType: string, token: string, apiToken?: string, _options?: Configuration): Promise<RequestContext>;
}
export declare class UserApiResponseProcessor {
    addRegistrationOrDeviceToken(response: ResponseContext): Promise<AddRegistrationOrDeviceTokenResponse>;
    choosePushNotificationContentTemplate(response: ResponseContext): Promise<ChoosePushNotificationContentTemplateResponse>;
    createUser(response: ResponseContext): Promise<SendBirdUser>;
    createUserToken(response: ResponseContext): Promise<CreateUserTokenResponse>;
    deleteUserById(response: ResponseContext): Promise<any>;
    leaveMyGroupChannels(response: ResponseContext): Promise<any>;
    listMyGroupChannels(response: ResponseContext): Promise<ListMyGroupChannelsResponse>;
    listRegistrationOrDeviceTokens(response: ResponseContext): Promise<ListRegistrationOrDeviceTokensResponse>;
    listUsers(response: ResponseContext): Promise<ListUsersResponse>;
    markAllMessagesAsRead(response: ResponseContext): Promise<any>;
    registerAsOperatorToChannelsWithCustomChannelTypes(response: ResponseContext): Promise<any>;
    removeRegistrationOrDeviceToken(response: ResponseContext): Promise<RemoveRegistrationOrDeviceTokenResponse>;
    removeRegistrationOrDeviceTokenByToken(response: ResponseContext): Promise<RemoveRegistrationOrDeviceTokenByTokenResponse>;
    removeRegistrationOrDeviceTokenFromOwnerByToken(response: ResponseContext): Promise<RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse>;
    resetPushPreferences(response: ResponseContext): Promise<ResetPushPreferencesResponse>;
    updateChannelInvitationPreference(response: ResponseContext): Promise<UpdateChannelInvitationPreferenceResponse>;
    updateCountPreferenceOfChannelByUrl(response: ResponseContext): Promise<UpdateCountPreferenceOfChannelByUrlResponse>;
    updatePushPreferences(response: ResponseContext): Promise<UpdatePushPreferencesResponse>;
    updatePushPreferencesForChannelByUrl(response: ResponseContext): Promise<UpdatePushPreferencesForChannelByUrlResponse>;
    updateUserById(response: ResponseContext): Promise<SendBirdUser>;
    viewChannelInvitationPreference(response: ResponseContext): Promise<ViewChannelInvitationPreferenceResponse>;
    viewCountPreferenceOfChannelByUrl(response: ResponseContext): Promise<ViewCountPreferenceOfChannelByUrlResponse>;
    viewNumberOfChannelsByJoinStatus(response: ResponseContext): Promise<ViewNumberOfChannelsByJoinStatusResponse>;
    viewNumberOfChannelsWithUnreadMessages(response: ResponseContext): Promise<ViewNumberOfChannelsWithUnreadMessagesResponse>;
    viewNumberOfUnreadItems(response: ResponseContext): Promise<ViewNumberOfUnreadItemsResponse>;
    viewNumberOfUnreadMessages(response: ResponseContext): Promise<ViewNumberOfUnreadMessagesResponse>;
    viewPushPreferences(response: ResponseContext): Promise<ViewPushPreferencesResponse>;
    viewPushPreferencesForChannelByUrl(response: ResponseContext): Promise<ViewPushPreferencesForChannelByUrlResponse>;
    viewUserById(response: ResponseContext): Promise<SendBirdUser>;
    viewWhoOwnsRegistrationOrDeviceTokenByToken(response: ResponseContext): Promise<Array<ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner>>;
}
