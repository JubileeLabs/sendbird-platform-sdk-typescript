import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext } from '../http/http';
import { AddApnsPushConfigurationData } from '../models/AddApnsPushConfigurationData';
import { AddApnsPushConfigurationResponse } from '../models/AddApnsPushConfigurationResponse';
import { AddFcmPushConfigurationData } from '../models/AddFcmPushConfigurationData';
import { AddFcmPushConfigurationResponse } from '../models/AddFcmPushConfigurationResponse';
import { AddHmsPushConfigurationData } from '../models/AddHmsPushConfigurationData';
import { AddHmsPushConfigurationResponse } from '../models/AddHmsPushConfigurationResponse';
import { AddIpToWhitelistData } from '../models/AddIpToWhitelistData';
import { AddIpToWhitelistResponse } from '../models/AddIpToWhitelistResponse';
import { BanUsersInChannelsWithCustomChannelTypeData } from '../models/BanUsersInChannelsWithCustomChannelTypeData';
import { ConfigureAutoEventData } from '../models/ConfigureAutoEventData';
import { CustomTypeListBannedUsersResponse } from '../models/CustomTypeListBannedUsersResponse';
import { DeleteAllowedIpsFromWhitelistResponse } from '../models/DeleteAllowedIpsFromWhitelistResponse';
import { DeleteApnsCertificateByIdResponse } from '../models/DeleteApnsCertificateByIdResponse';
import { GenerateSecondaryApiTokenData } from '../models/GenerateSecondaryApiTokenData';
import { GenerateSecondaryApiTokenResponse } from '../models/GenerateSecondaryApiTokenResponse';
import { ListMutedUsersInChannelsWithCustomChannelType200Response } from '../models/ListMutedUsersInChannelsWithCustomChannelType200Response';
import { ListPushConfigurationsResponse } from '../models/ListPushConfigurationsResponse';
import { ListPushNotificationContentTemplatesResponse } from '../models/ListPushNotificationContentTemplatesResponse';
import { ListSecondaryApiTokensResponse } from '../models/ListSecondaryApiTokensResponse';
import { MuteUsersInChannelsWithCustomChannelTypeData } from '../models/MuteUsersInChannelsWithCustomChannelTypeData';
import { RemovePushConfigurationByIdResponse } from '../models/RemovePushConfigurationByIdResponse';
import { RetrieveIpWhitelistResponse } from '../models/RetrieveIpWhitelistResponse';
import { RevokeSecondaryApiTokenByTokenResponse } from '../models/RevokeSecondaryApiTokenByTokenResponse';
import { SendBirdAutoEventMessageSettings } from '../models/SendBirdAutoEventMessageSettings';
import { SendBirdChannelResponse } from '../models/SendBirdChannelResponse';
import { SetDomainFilterData } from '../models/SetDomainFilterData';
import { UpdateApnsPushConfigurationByIdData } from '../models/UpdateApnsPushConfigurationByIdData';
import { UpdateApnsPushConfigurationByIdResponse } from '../models/UpdateApnsPushConfigurationByIdResponse';
import { UpdateDefaultChannelInvitationPreferenceData } from '../models/UpdateDefaultChannelInvitationPreferenceData';
import { UpdateDefaultChannelInvitationPreferenceResponse } from '../models/UpdateDefaultChannelInvitationPreferenceResponse';
import { UpdateFcmPushConfigurationByIdData } from '../models/UpdateFcmPushConfigurationByIdData';
import { UpdateFcmPushConfigurationByIdResponse } from '../models/UpdateFcmPushConfigurationByIdResponse';
import { UpdateHmsPushConfigurationByIdData } from '../models/UpdateHmsPushConfigurationByIdData';
import { UpdateHmsPushConfigurationByIdResponse } from '../models/UpdateHmsPushConfigurationByIdResponse';
import { UpdatePushNotificationContentTemplateData } from '../models/UpdatePushNotificationContentTemplateData';
import { UpdatePushNotificationContentTemplateResponse } from '../models/UpdatePushNotificationContentTemplateResponse';
import { ViewDefaultChannelInvitationPreferenceResponse } from '../models/ViewDefaultChannelInvitationPreferenceResponse';
import { ViewPushConfigurationByIdResponse } from '../models/ViewPushConfigurationByIdResponse';
import { ViewPushNotificationContentTemplateResponse } from '../models/ViewPushNotificationContentTemplateResponse';
import { ViewSecondaryApiTokenByTokenResponse } from '../models/ViewSecondaryApiTokenByTokenResponse';
export declare class ApplicationApiRequestFactory extends BaseAPIRequestFactory {
    addApnsPushConfiguration(apiToken?: string, addApnsPushConfigurationData?: AddApnsPushConfigurationData, _options?: Configuration): Promise<RequestContext>;
    addFcmPushConfiguration(apiToken?: string, addFcmPushConfigurationData?: AddFcmPushConfigurationData, _options?: Configuration): Promise<RequestContext>;
    addHmsPushConfiguration(apiToken?: string, addHmsPushConfigurationData?: AddHmsPushConfigurationData, _options?: Configuration): Promise<RequestContext>;
    addIpToWhitelist(apiToken?: string, addIpToWhitelistData?: AddIpToWhitelistData, _options?: Configuration): Promise<RequestContext>;
    banUsersInChannelsWithCustomChannelType(customType: string, apiToken?: string, banUsersInChannelsWithCustomChannelTypeData?: BanUsersInChannelsWithCustomChannelTypeData, _options?: Configuration): Promise<RequestContext>;
    configureAutoEventMessages(apiToken?: string, configureAutoEventData?: ConfigureAutoEventData, _options?: Configuration): Promise<RequestContext>;
    deleteAllowedIpsFromWhitelist(ipWhitelistAddresses: Array<string>, apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    deleteApnsCertificateById(providerId: string, apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    generateSecondaryApiToken(apiToken?: string, generateSecondaryApiTokenData?: GenerateSecondaryApiTokenData, _options?: Configuration): Promise<RequestContext>;
    listAutoEventMessages(apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    listBannedUsersInChannelsWithCustomChannelType(customType: string, apiToken?: string, token?: string, limit?: number, _options?: Configuration): Promise<RequestContext>;
    listMutedUsersInChannelsWithCustomChannelType(customType: string, apiToken?: string, token?: string, limit?: number, _options?: Configuration): Promise<RequestContext>;
    listPushConfigurations(pushType: string, apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    listPushNotificationContentTemplates(apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    listSecondaryApiTokens(apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    muteUsersInChannelsWithCustomChannelType(customType: string, apiToken?: string, muteUsersInChannelsWithCustomChannelTypeData?: MuteUsersInChannelsWithCustomChannelTypeData, _options?: Configuration): Promise<RequestContext>;
    removePushConfigurationById(pushType: string, providerId: string, apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    retrieveIpWhitelist(apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    revokeSecondaryApiTokenByToken(apiToken2: string, apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    setDomainFilter(customType: string, apiToken?: string, setDomainFilterData?: SetDomainFilterData, _options?: Configuration): Promise<RequestContext>;
    unbanUsersInChannelsWithCustomChannelType(customType: string, userIds: Array<string>, apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    unmuteUsersInChannelsWithCustomChannelType(customType: string, userIds: Array<string>, apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    updateApnsPushConfigurationById(providerId: string, apiToken?: string, updateApnsPushConfigurationByIdData?: UpdateApnsPushConfigurationByIdData, _options?: Configuration): Promise<RequestContext>;
    updateDefaultChannelInvitationPreference(apiToken?: string, updateDefaultChannelInvitationPreferenceData?: UpdateDefaultChannelInvitationPreferenceData, _options?: Configuration): Promise<RequestContext>;
    updateFcmPushConfigurationById(providerId: string, apiToken?: string, updateFcmPushConfigurationByIdData?: UpdateFcmPushConfigurationByIdData, _options?: Configuration): Promise<RequestContext>;
    updateHmsPushConfigurationById(providerId: string, apiToken?: string, updateHmsPushConfigurationByIdData?: UpdateHmsPushConfigurationByIdData, _options?: Configuration): Promise<RequestContext>;
    updatePushNotificationContentTemplate(templateName: string, apiToken?: string, updatePushNotificationContentTemplateData?: UpdatePushNotificationContentTemplateData, _options?: Configuration): Promise<RequestContext>;
    viewDefaultChannelInvitationPreference(apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    viewPushConfigurationById(pushType: string, providerId: string, apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    viewPushNotificationContentTemplate(templateName: string, apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    viewSecondaryApiTokenByToken(apiToken2: string, apiToken?: string, _options?: Configuration): Promise<RequestContext>;
}
export declare class ApplicationApiResponseProcessor {
    addApnsPushConfiguration(response: ResponseContext): Promise<AddApnsPushConfigurationResponse>;
    addFcmPushConfiguration(response: ResponseContext): Promise<AddFcmPushConfigurationResponse>;
    addHmsPushConfiguration(response: ResponseContext): Promise<AddHmsPushConfigurationResponse>;
    addIpToWhitelist(response: ResponseContext): Promise<AddIpToWhitelistResponse>;
    banUsersInChannelsWithCustomChannelType(response: ResponseContext): Promise<any>;
    configureAutoEventMessages(response: ResponseContext): Promise<SendBirdAutoEventMessageSettings>;
    deleteAllowedIpsFromWhitelist(response: ResponseContext): Promise<DeleteAllowedIpsFromWhitelistResponse>;
    deleteApnsCertificateById(response: ResponseContext): Promise<DeleteApnsCertificateByIdResponse>;
    generateSecondaryApiToken(response: ResponseContext): Promise<GenerateSecondaryApiTokenResponse>;
    listAutoEventMessages(response: ResponseContext): Promise<SendBirdAutoEventMessageSettings>;
    listBannedUsersInChannelsWithCustomChannelType(response: ResponseContext): Promise<CustomTypeListBannedUsersResponse>;
    listMutedUsersInChannelsWithCustomChannelType(response: ResponseContext): Promise<ListMutedUsersInChannelsWithCustomChannelType200Response>;
    listPushConfigurations(response: ResponseContext): Promise<ListPushConfigurationsResponse>;
    listPushNotificationContentTemplates(response: ResponseContext): Promise<ListPushNotificationContentTemplatesResponse>;
    listSecondaryApiTokens(response: ResponseContext): Promise<ListSecondaryApiTokensResponse>;
    muteUsersInChannelsWithCustomChannelType(response: ResponseContext): Promise<any>;
    removePushConfigurationById(response: ResponseContext): Promise<RemovePushConfigurationByIdResponse>;
    retrieveIpWhitelist(response: ResponseContext): Promise<RetrieveIpWhitelistResponse>;
    revokeSecondaryApiTokenByToken(response: ResponseContext): Promise<RevokeSecondaryApiTokenByTokenResponse>;
    setDomainFilter(response: ResponseContext): Promise<SendBirdChannelResponse>;
    unbanUsersInChannelsWithCustomChannelType(response: ResponseContext): Promise<any>;
    unmuteUsersInChannelsWithCustomChannelType(response: ResponseContext): Promise<any>;
    updateApnsPushConfigurationById(response: ResponseContext): Promise<UpdateApnsPushConfigurationByIdResponse>;
    updateDefaultChannelInvitationPreference(response: ResponseContext): Promise<UpdateDefaultChannelInvitationPreferenceResponse>;
    updateFcmPushConfigurationById(response: ResponseContext): Promise<UpdateFcmPushConfigurationByIdResponse>;
    updateHmsPushConfigurationById(response: ResponseContext): Promise<UpdateHmsPushConfigurationByIdResponse>;
    updatePushNotificationContentTemplate(response: ResponseContext): Promise<UpdatePushNotificationContentTemplateResponse>;
    viewDefaultChannelInvitationPreference(response: ResponseContext): Promise<ViewDefaultChannelInvitationPreferenceResponse>;
    viewPushConfigurationById(response: ResponseContext): Promise<ViewPushConfigurationByIdResponse>;
    viewPushNotificationContentTemplate(response: ResponseContext): Promise<ViewPushNotificationContentTemplateResponse>;
    viewSecondaryApiTokenByToken(response: ResponseContext): Promise<ViewSecondaryApiTokenByTokenResponse>;
}
