import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext } from '../http/http';
import { GcAcceptInvitationData } from '../models/GcAcceptInvitationData';
import { GcCheckIfMemberByIdResponse } from '../models/GcCheckIfMemberByIdResponse';
import { GcCreateChannelData } from '../models/GcCreateChannelData';
import { GcDeclineInvitationData } from '../models/GcDeclineInvitationData';
import { GcHideOrArchiveChannelData } from '../models/GcHideOrArchiveChannelData';
import { GcInviteAsMembersData } from '../models/GcInviteAsMembersData';
import { GcJoinChannelData } from '../models/GcJoinChannelData';
import { GcLeaveChannelData } from '../models/GcLeaveChannelData';
import { GcListChannelsResponse } from '../models/GcListChannelsResponse';
import { GcListMembersResponse } from '../models/GcListMembersResponse';
import { GcListOperatorsResponse } from '../models/GcListOperatorsResponse';
import { GcRegisterOperatorsData } from '../models/GcRegisterOperatorsData';
import { GcRegisterOperatorsResponse } from '../models/GcRegisterOperatorsResponse';
import { GcResetChatHistoryData } from '../models/GcResetChatHistoryData';
import { GcResetChatHistoryResponse } from '../models/GcResetChatHistoryResponse';
import { GcTypingIndicatorsData } from '../models/GcTypingIndicatorsData';
import { GcUpdateChannelByUrlData } from '../models/GcUpdateChannelByUrlData';
import { OcDeleteChannelByUrl200Response } from '../models/OcDeleteChannelByUrl200Response';
import { SendBirdGroupChannel } from '../models/SendBirdGroupChannel';
export declare class GroupChannelApiRequestFactory extends BaseAPIRequestFactory {
    gcAcceptInvitation(channelUrl: string, apiToken?: string, gcAcceptInvitationData?: GcAcceptInvitationData, _options?: Configuration): Promise<RequestContext>;
    gcCancelTheRegistrationOfOperators(channelUrl: string, operatorIds: Array<string>, apiToken?: string, deleteAll?: boolean, _options?: Configuration): Promise<RequestContext>;
    gcCheckIfMemberById(channelUrl: string, userId: string, apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    gcCreateChannel(apiToken?: string, gcCreateChannelData?: GcCreateChannelData, _options?: Configuration): Promise<RequestContext>;
    gcDeclineInvitation(channelUrl: string, apiToken?: string, gcDeclineInvitationData?: GcDeclineInvitationData, _options?: Configuration): Promise<RequestContext>;
    gcDeleteChannelByUrl(channelUrl: string, apiToken?: string, _options?: Configuration): Promise<RequestContext>;
    gcHideOrArchiveChannel(channelUrl: string, apiToken?: string, gcHideOrArchiveChannelData?: GcHideOrArchiveChannelData, _options?: Configuration): Promise<RequestContext>;
    gcInviteAsMembers(channelUrl: string, apiToken?: string, gcInviteAsMembersData?: GcInviteAsMembersData, _options?: Configuration): Promise<RequestContext>;
    gcJoinChannel(channelUrl: string, apiToken?: string, gcJoinChannelData?: GcJoinChannelData, _options?: Configuration): Promise<RequestContext>;
    gcLeaveChannel(channelUrl: string, apiToken?: string, gcLeaveChannelData?: GcLeaveChannelData, _options?: Configuration): Promise<RequestContext>;
    gcListChannels(apiToken?: string, token?: string, limit?: number, distinctMode?: string, publicMode?: string, superMode?: string, createdAfter?: number, createdBefore?: number, showEmpty?: boolean, showMember?: boolean, showDeliveryReceipt?: boolean, showReadReceipt?: boolean, showMetadata?: boolean, showFrozen?: boolean, order?: string, metadataOrderKey?: string, customTypes?: string, customTypeStartswith?: string, channelUrls?: string, name?: string, nameContains?: string, nameStartswith?: string, membersExactlyIn?: string, membersIncludeIn?: string, queryType?: string, membersNickname?: string, membersNicknameContains?: string, metadataKey?: string, metadataValues?: string, metadataValueStartswith?: string, metacounterKey?: string, metacounterValues?: string, metacounterValueGt?: string, metacounterValueGte?: string, metacounterValueLt?: string, metacounterValueLte?: string, includeSortedMetaarrayInLastMessage?: boolean, customType?: string, readReceipt?: boolean, member?: boolean, isDistinct?: boolean, membersIn?: string, userId?: string, _options?: Configuration): Promise<RequestContext>;
    gcListMembers(channelUrl: string, apiToken?: string, token?: string, limit?: number, showDeliveryReceipt?: boolean, showReadReceipt?: boolean, order?: string, operatorFilter?: string, memberStateFilter?: string, mutedMemberFilter?: string, nicknameStartswith?: string, _options?: Configuration): Promise<RequestContext>;
    gcListOperators(channelUrl: string, apiToken?: string, token?: string, limit?: number, _options?: Configuration): Promise<RequestContext>;
    gcRegisterOperators(channelUrl: string, apiToken?: string, gcRegisterOperatorsData?: GcRegisterOperatorsData, _options?: Configuration): Promise<RequestContext>;
    gcResetChatHistory(channelUrl: string, apiToken?: string, gcResetChatHistoryData?: GcResetChatHistoryData, _options?: Configuration): Promise<RequestContext>;
    gcStartTypingIndicators(channelUrl: string, apiToken?: string, gcTypingIndicatorsData?: GcTypingIndicatorsData, _options?: Configuration): Promise<RequestContext>;
    gcStopTypingIndicators(channelUrl: string, apiToken?: string, gcTypingIndicatorsData?: GcTypingIndicatorsData, _options?: Configuration): Promise<RequestContext>;
    gcUnhideOrUnarchiveChannel(channelUrl: string, userId: string, apiToken?: string, shouldUnhideAll?: boolean, _options?: Configuration): Promise<RequestContext>;
    gcUpdateChannelByUrl(channelUrl: string, apiToken?: string, gcUpdateChannelByUrlData?: GcUpdateChannelByUrlData, _options?: Configuration): Promise<RequestContext>;
    gcViewChannelByUrl(channelUrl: string, apiToken?: string, showDeliveryReceipt?: boolean, showReadReceipt?: boolean, showMember?: boolean, readReceipt?: boolean, member?: boolean, _options?: Configuration): Promise<RequestContext>;
}
export declare class GroupChannelApiResponseProcessor {
    gcAcceptInvitation(response: ResponseContext): Promise<SendBirdGroupChannel>;
    gcCancelTheRegistrationOfOperators(response: ResponseContext): Promise<OcDeleteChannelByUrl200Response>;
    gcCheckIfMemberById(response: ResponseContext): Promise<GcCheckIfMemberByIdResponse>;
    gcCreateChannel(response: ResponseContext): Promise<SendBirdGroupChannel>;
    gcDeclineInvitation(response: ResponseContext): Promise<OcDeleteChannelByUrl200Response>;
    gcDeleteChannelByUrl(response: ResponseContext): Promise<OcDeleteChannelByUrl200Response>;
    gcHideOrArchiveChannel(response: ResponseContext): Promise<OcDeleteChannelByUrl200Response>;
    gcInviteAsMembers(response: ResponseContext): Promise<SendBirdGroupChannel>;
    gcJoinChannel(response: ResponseContext): Promise<void>;
    gcLeaveChannel(response: ResponseContext): Promise<OcDeleteChannelByUrl200Response>;
    gcListChannels(response: ResponseContext): Promise<GcListChannelsResponse>;
    gcListMembers(response: ResponseContext): Promise<GcListMembersResponse>;
    gcListOperators(response: ResponseContext): Promise<GcListOperatorsResponse>;
    gcRegisterOperators(response: ResponseContext): Promise<GcRegisterOperatorsResponse>;
    gcResetChatHistory(response: ResponseContext): Promise<GcResetChatHistoryResponse>;
    gcStartTypingIndicators(response: ResponseContext): Promise<OcDeleteChannelByUrl200Response>;
    gcStopTypingIndicators(response: ResponseContext): Promise<OcDeleteChannelByUrl200Response>;
    gcUnhideOrUnarchiveChannel(response: ResponseContext): Promise<OcDeleteChannelByUrl200Response>;
    gcUpdateChannelByUrl(response: ResponseContext): Promise<SendBirdGroupChannel>;
    gcViewChannelByUrl(response: ResponseContext): Promise<SendBirdGroupChannel>;
}
